# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8 object detection model with P2/4 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov8
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# YOLOv8.0 backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, RepVGGBlock, [128, 3, 2]]  # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, RepVGGBlock, [256, 3, 2]]  # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, RepVGGBlock, [512, 3, 2]]  # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, RepVGGBlock, [1024, 3, 2]]  # 7-P5/32
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]]  # 9


# YOLOv8.0-p2 head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 10 (from layer 9, P5 level)
  # DWConv from Backbone P3 (layer 4)
  - [4, 1, DWConv, [128, 3, 2]]                 # 11 (from layer 4, P3_out=256 for base, 128 for 's'). Output 128 ch.
  # Concat P5_upsampled, Backbone_P4 (layer 6), DWConv_P3_downsampled
  - [[10, 6, 11], 1, Concat, [1]]               # 12. Channels: P5_up(512) + P4_bb(256) + P3_dw(128) = 896. (For 's' scale)
                                                  # P5_up (1024*0.5=512), P4_bb (512*0.5=256), P3_dw (256*0.5=128)
  - [-1, 3, C2f, [512, True]]                   # 13. Output P4 neck: 512 ch.

  # Neck for P3 (ÊúÄÁªàËæìÂá∫ÁªôC2fÊòØ256ÈÄöÈÅì)
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 14 (from layer 13, P4_neck)
  # DWConv from Backbone P2 (layer 2)
  - [2, 1, DWConv, [64, 3, 2]]                  # 15 (from layer 2, P2_out=128 for base, 64 for 's'). Output 64 ch.
  # Concat P4_neck_upsampled, Backbone_P3 (layer 4), DWConv_P2_downsampled
  - [[14, 4, 15], 1, Concat, [1]]               # 16. Channels: P4n_up(512) + P3_bb(128) + P2_dw(64) = 704
  - [-1, 3, C2f, [256, True]]                   # 17. Output P3 neck: 256 ch. (P3/8-small in blog YAML)

  # Neck for P2 (ÊúÄÁªàËæìÂá∫ÁªôC2fÊòØ128ÈÄöÈÅì)
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 18 (from layer 17, P3_neck)
  # DWConv from Backbone P1 (layer 0)
  - [0, 1, DWConv, [32, 3, 2]]                  # 19 (from layer 0, P1_out=64 for base, 32 for 's'). Output 32 ch.
  # Concat P3_neck_upsampled, Backbone_P2 (layer 2), DWConv_P1_downsampled
  - [[18, 2, 19], 1, Concat, [1]]               # 20. Channels: P3n_up(256) + P2_bb(64) + P1_dw(32) = 352
  - [-1, 3, C2f, [128, True]]                   # 21. Output P2 neck: 128 ch. (P2/4-xsmall in blog YAML)

  # PANet downsample path
  - [-1, 1, Conv, [128, 3, 2]]                  # 22 (from P2_neck, layer 21)
  - [[-1, 17], 1, Concat, [1]]                  # 23 cat with P3_neck (layer 17)
  - [-1, 3, C2f, [256, True]]                   # 24 (Output P3 PAN)

  - [-1, 1, Conv, [256, 3, 2]]                  # 25 (from P3_PAN, layer 24)
  - [[-1, 13], 1, Concat, [1]]                  # 26 cat with P4_neck (layer 13)
  - [-1, 3, C2f, [512, True]]                   # 27 (Output P4 PAN)

  - [-1, 1, Conv, [512, 3, 2]]                  # 28 (from P4_PAN, layer 27)
  - [[-1, 9], 1, Concat, [1]]                   # 29 cat with SPPF output (P5_backbone, layer 9)
                                                  # Ê≥®ÊÑèÔºöÂçöÂÆ¢ÁöÑYAMLËøôÈáåÊòØ concat layer 9 (SPPF)
                                                  # ËÄå‰∏çÊòØconcat backbone P5 (layer 8)
  - [-1, 3, C2f, [1024, True]]                  # 30 (Output P5 PAN)

  # Detect head
  - [[21, 24, 27, 30], 1, Detect, [nc]]  # Detect(P2, P3, P4, P5)
                                          # P2_neck (layer 21), P3_PAN (layer 24), P4_PAN (layer 27), P5_PAN (layer 30)
