# YOLO 项目

## 1. 概述

本项目是一个完整的YOLO目标检测解决方案，包含从数据标注、模型训练到模型应用的全流程工具。主要包括两个部分：

1. **YOLOv8目标检测系统** - 一个基于PyQt5的图形界面应用，用于使用YOLOv8模型进行目标检测
2. **LabelMe 标注与数据准备工具** - 用于图像标注并为YOLO目标检测项目准备数据集的工具链

## 2. 项目架构

项目采用以下目录结构，便于数据管理和工作流程组织：

```
yolo_project/
├── main.py                      # 主程序入口，实现UI界面
├── data/
│   ├── raw_images/              # 存放原始未标注图像
│   ├── annotations/             # 存放 LabelMe 生成的 JSON 格式标注文件
│   ├── yolo_dataset/            # 存放转换后的 YOLO 格式数据集
│   │   ├── images/
│   │   │   ├── train/          # 训练集图像
│   │   │   ├── val/            # 验证集图像
│   │   │   └── test/           # 测试集图像
│   │   ├── labels/
│   │   │   ├── train/          # 训练集 YOLO 格式标签
│   │   │   ├── val/            # 验证集 YOLO 格式标签
│   │   │   └── test/           # 测试集 YOLO 格式标签
│   │   └── data.yaml           # YOLO 数据集配置文件
│   └── classes.txt              # 类别列表文件
├── scripts/
│   ├── labelme2yolo.py          # 转换脚本：将 LabelMe JSON 标注转换为 YOLO 格式
│   └── split_dataset.py         # 数据集划分脚本
├── models/                      # 存放训练好的模型权重文件
├── results/                     # 存放检测结果
│   ├── images/                  # 图片检测结果
│   ├── videos/                  # 视频检测结果
│   └── camera/                  # 摄像头检测结果
└── doc/                         # 文档目录
```

## 3. YOLOv8目标检测系统

### 3.1 功能概述

YOLOv8目标检测系统是一个基于PyQt5开发的图形界面应用，提供了以下功能：

- **多种输入源支持**：
  - 图片检测：加载并检测单张图片
  - 视频检测：加载并检测视频文件
  - 摄像头检测：实时检测摄像头画面

- **可视化界面**：
  - 双视图对比：同时显示原始图像和检测结果
  - 实时参数调节：调整置信度和IoU阈值
  - 检测结果表格：详细显示检测到的对象信息

- **结果存储**：
  - 保存检测结果图像到results/images目录
  - 自动保存视频检测结果到results/videos目录
  - 自动保存摄像头检测结果到results/camera目录

### 3.2 系统要求

- Python 3.7+
- PyQt5
- OpenCV
- Ultralytics YOLOv8
- NumPy

### 3.3 安装与运行

1. 确保已安装所需依赖：
   ```bash
   pip install PyQt5 opencv-python ultralytics numpy
   ```

2. 运行主程序：
   ```bash
   python main.py
   ```

### 3.4 使用说明

1. **加载模型**：
   - 从下拉列表选择models目录中的模型文件
   - 点击"加载模型"按钮

2. **调整参数**：
   - 使用滑块调整置信度阈值（默认0.25）
   - 使用滑块调整IoU阈值（默认0.45）

3. **选择检测模式**：
   - 图片检测：选择并检测单张图片
   - 视频检测：选择并检测视频文件
   - 摄像头检测：使用摄像头进行实时检测

4. **查看结果**：
   - 上方显示原始图像
   - 下方显示检测结果图像
   - 右侧表格显示检测到的对象详情

5. **保存结果**：
   - 点击"保存结果"按钮保存当前检测结果图像
   - 视频和摄像头检测结果自动保存在results目录下的相应子目录中

## 4. 数据标注与准备流程

### 4.1 准备工作

1. **安装LabelMe**：
   ```bash
   pip install labelme
   ```

2. **准备类别文件**：
   在`data/classes.txt`中列出所有目标类别，每行一个类别名称。

### 4.2 数据标注流程

1. **准备原始图像**：
   将待标注的图像放入`data/raw_images/`目录。

2. **使用LabelMe标注**：
   ```bash
   labelme data/raw_images/ --output data/annotations/ --labels data/classes.txt
   ```

3. **转换为YOLO格式**：
   ```bash
   python scripts/labelme2yolo.py
   ```

4. **划分数据集**：
   ```bash
   python scripts/split_dataset.py
   ```

### 4.3 模型训练

使用准备好的数据集训练YOLOv8模型：

```bash
yolo task=detect mode=train model=yolov8s.pt data=data/yolo_dataset/data.yaml epochs=100 imgsz=640
```

训练完成后，将生成的模型文件（如best.pt）放入`models/`目录，即可在UI界面中使用。

## 5. 项目文档

详细文档位于`doc/`目录：

- `ui_guide.md`：UI界面使用指南
- `development_guide.md`：开发者指南

## 6. 贡献与支持

欢迎提交问题报告和功能建议。如需贡献代码，请遵循以下步骤：

1. Fork本仓库
2. 创建您的特性分支 (`git checkout -b feature/amazing-feature`)
3. 提交您的更改 (`git commit -m 'Add some amazing feature'`)
4. 推送到分支 (`git push origin feature/amazing-feature`)
5. 打开一个Pull Request
